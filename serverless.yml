# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: vminda
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: beejcap
# "service" is the name of this project. This will also be added to your AWS resource names.
service: beejcap

package:
  exclude:
    - .env
    - .env.*
    - .env.example
    - .env.local
    - .env.backup
    - node_modules/.cache/**
    - test/**
    - docs/**
    - scripts/**
    - "*.md"
    - .git/**
    - .gitignore
    - .DS_Store

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'vikas'}
  profile: beejcap-aws
  region: ap-south-1
  
  # Enable X-Ray tracing
  tracing:
    lambda: true    # Enable Lambda tracing
    apiGateway: true # Enable API Gateway tracing
  
  environment:
    # DynamoDB Table
    DYNAMODB_TABLE: beejcap_${self:provider.stage}
    # X-Ray Trace ID
    _X_AMZN_TRACE_ID: ${env:_X_AMZN_TRACE_ID, ''}
    # Cognito Configuration - Dynamic based on stage
    COGNITO_USER_POOL_ID: 
      Ref: CognitoUserPoolMyUserPool1
    COGNITO_CLIENT_ID:
      Ref: CognitoUserPoolClient
    COGNITO_REGION: ${self:provider.region}
    COGNITO_ISSUER:
      Fn::Join:
        - ""
        - - "https://cognito-idp."
          - ${self:provider.region}
          - ".amazonaws.com/"
          - Ref: CognitoUserPoolMyUserPool1
    # SNS Platform Applications for Push Notifications (set via environment variables)
    SNS_PLATFORM_APPLICATION_IOS: ${env:SNS_PLATFORM_APPLICATION_IOS, ''}
    SNS_PLATFORM_APPLICATION_IOS_SANDBOX: ${env:SNS_PLATFORM_APPLICATION_IOS_SANDBOX, ''}
    SNS_PLATFORM_APPLICATION_ANDROID: ${env:SNS_PLATFORM_APPLICATION_ANDROID, ''}
    # Stage and Region
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    # JWT Secret for OTP-based authentication
    JWT_SECRET: ${env:JWT_SECRET, 'beejcap-jwt-secret-${self:provider.stage}-2025'}
    # Logging Configuration
    LOG_LEVEL: ${env:LOG_LEVEL, self:custom.logLevels.${self:provider.stage}, 'INFO'}
    SERVICE_NAME: lsp-oms
    ENABLE_REQUEST_LOGGING: true
    # Custom Domain Configuration
    API_DOMAIN: ${self:custom.domainMapping.${self:provider.stage}, 'devapi.beejcap.com'}
    API_BASE_URL: https://${self:custom.domainMapping.${self:provider.stage}, 'devapi.beejcap.com'}
  iam:
    role:
      name: beejcap-${opt:stage, self:provider.stage}-role
      statements:
        - Effect: "Allow" # X-Ray permissions (required)
          Action:
            - "xray:PutTraceSegments"
            - "xray:PutTelemetryRecords" 
            - "xray:GetSamplingRules"
            - "xray:GetSamplingTargets"
          Resource: "*"
        - Effect: "Allow"
          Action: ["dynamodb:*"]
          Resource: "*"
        - Effect: "Allow"
          Action:
            ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
          Resource: "*"
        - Effect: "Allow" # Allow SNS actions for push notifications
          Action:
            - "sns:Publish"
            - "sns:CreatePlatformEndpoint"
            - "sns:DeleteEndpoint"
            - "sns:GetEndpointAttributes"
            - "sns:SetEndpointAttributes"
            - "sns:ListEndpointsByPlatformApplication"
            - "sns:CreatePlatformApplication"
            - "sns:GetPlatformApplicationAttributes"
            - "sns:SetPlatformApplicationAttributes"
            - "sns:ListPlatformApplications"
          Resource: "*" # Adjust this to specify particular SNS resources if necessary  
        - Effect: "Allow" # Allow all actions on all Cognito resources
          Action:
            - "cognito-idp:*"
          Resource: "*"  
        - Effect: "Allow" # Allow all actions on all Cognito resources
          Action:
            - "ses:*"
          Resource: "*"    
  httpApi:        
    # Authorizers removed - all authentication handled by Express middleware
    # authorizers:
    #   beejcapJwtAuthorizer:
    #     type: jwt
    #     identitySource: $request.header.Authorization
    #     issuerUrl: 
    #       Fn::Join:
    #       - ""
    #       - - "https://cognito-idp."
    #         - ${self:provider.region}
    #         - ".amazonaws.com/"
    #         - Ref: CognitoUserPoolMyUserPool1
    #     audience:
    #       - Ref: CognitoUserPoolClient         
functions: ${self:custom.functions.${self:provider.stage}}

resources:
  Resources:
    appTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: beejcap_${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: PK1
            AttributeType: S
          - AttributeName: SK1
            AttributeType: S
          - AttributeName: PK2
            AttributeType: S
          - AttributeName: SK2
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: PK1
                KeyType: HASH
              - AttributeName: SK1
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: GSI2
            KeySchema:
              - AttributeName: PK2
                KeyType: HASH
              - AttributeName: SK2
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CognitoUserPoolMyUserPool1:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: beejcapUserPool_${self:provider.stage}
        Schema:
          - Name: email
            Required: true
            Mutable: false
            AttributeDataType: String
          - Name: isConfirmedByAdmin
            Required: false
            Mutable: true
            AttributeDataType: Boolean
            DeveloperOnlyAttribute: false  
          - Name: role
            Required: false
            Mutable: true
            AttributeDataType: String
            DeveloperOnlyAttribute: false    
          - Name: enterpriseType
            Required: false
            Mutable: true
            AttributeDataType: String   
          - Name: eid
            Required: false
            Mutable: true
            AttributeDataType: String     
        AutoVerifiedAttributes:
          - email
        EmailConfiguration:
          EmailSendingAccount: DEVELOPER  
          SourceArn: arn:aws:ses:ap-south-1:114337216111:identity:beejcap.com
          From: The Beejcap Team <hello@beejcap.com>
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
          EmailMessage: | 
            Welcome to Beejcap!<br/><br/> 
            Your verification code is : {####}.<br/><br/>
            Please use this code to complete your account verification.<br/><br/>
            Thank You,<br/>
            The Beejcap Team<br/>
          EmailSubject: "[Action Required] Your account verification code"
          # Optional: If you also want to customize SMS messages
          SmsMessage: "Welcome to Beejcap! Your verification code is {####}."  
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: beejcapUserPoolClient_${self:provider.stage}
        UserPoolId:
          Ref: CognitoUserPoolMyUserPool1
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH

    # SNS Topic for general notifications
    SNSNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: beejcap-notifications-${self:provider.stage}
        DisplayName: LSP-OMS Notifications

  Outputs:
    # DynamoDB Table
    DynamoDBTableName:
      Description: "DynamoDB table name"
      Value:
        Ref: appTable
      Export:
        Name: ${self:service}-${self:provider.stage}-DynamoDBTableName

    # Cognito User Pool
    CognitoUserPoolId:
      Description: "Cognito User Pool ID"
      Value:
        Ref: CognitoUserPoolMyUserPool1
      Export:
        Name: ${self:service}-${self:provider.stage}-CognitoUserPoolId

    CognitoUserPoolClientId:
      Description: "Cognito User Pool Client ID"
      Value:
        Ref: CognitoUserPoolClient
      Export:
        Name: ${self:service}-${self:provider.stage}-CognitoUserPoolClientId

    SNSNotificationTopicArn:
      Description: "SNS Topic ARN for notifications"
      Value:
        Ref: SNSNotificationTopic
      Export:
        Name: ${self:service}-${self:provider.stage}-SNSNotificationTopicArn

plugins: ${self:custom.plugins.${self:provider.stage}}

custom:
  # Stage-specific plugins
  plugins:
    vikas: [] # No plugins for vikas stage
    dev: 
      - serverless-domain-manager
    prod: 
      - serverless-domain-manager

  # Stage-specific functions
  functions:
    vikas: ${self:custom.allFunctions} # Enable functions for vikas stage
    dev: ${self:custom.allFunctions}
    prod: ${self:custom.allFunctions}
    staging: ${self:custom.allFunctions}
    test: ${self:custom.allFunctions}
  
  # All functions definition
  allFunctions:
    PreTokenGeneration:
      handler: app.preTokenGenerationHandler
      tracing: Active  # Enable X-Ray tracing
    api:
      handler: app.handler
      tracing: Active  # Enable X-Ray tracing
      events:
        # Public auth endpoints
        - httpApi:
            path: /v1/auth/{proxy+}
            method: any
        # Admin Routes (no authentication)
        - httpApi:
            path: /v1/admin/{proxy+}
            method: any
        # Supplier Routes (authentication required)
        - httpApi:
            path: /v1/supplier/{proxy+}
            method: any
  
  # Exclude functions, events for vikas stage
  excludeVikas: ${strToBool(${self:custom.stageConfig.${self:provider.stage}.excludeResources, false})}
  
  # Stage-specific configuration
  stageConfig:
    vikas:
      excludeResources: false
    dev:
      excludeResources: false
    prod:
      excludeResources: false
    staging:
      excludeResources: false
    test:
      excludeResources: false
  
  customDomain:
    domainName: ${self:custom.domainMapping.${self:provider.stage}, 'devapi.beejcap.com'}
    stage: ${self:provider.stage}
    basePath: ''
    certificateName: '*.beejcap.com'
    createRoute53Record: false
    endpointType: 'regional'
    securityPolicy: tls_1_2
    apiType: http
    autoDomain: false
    enabled: ${strToBool(${self:custom.stageConfig.${self:provider.stage}.excludeResources, false})}
  
  # Log levels per stage
  logLevels:
    dev: DEBUG
    prod: WARN
    vikas: DEBUG
    
  domainMapping:
    dev: devapi.beejcap.com
    prod: api.beejcap.com
